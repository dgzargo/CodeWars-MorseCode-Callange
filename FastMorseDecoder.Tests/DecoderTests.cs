namespace FastMorseDecoder.Tests;

public class DecoderTests
{
	private string _morseHelperDictionary;

	[OneTimeSetUp]
	public void Setup()
	{
		var morseHelper = new SignDecoder(stackalloc char[SignDecoder.SpanLength], Preloaded.MORSE_CODE, true);
		_morseHelperDictionary = morseHelper.CalculatedDictionary;
	}

	[Test]
	public void HeyJude() {
		var morseHelper = new SignDecoder(_morseHelperDictionary);
		Assert.That(Decoder.DecodeBitsToText("0000000011011010011100000110000001111110100111110011111100000000000111011111111011111011111000000101100011111100000111110011101100000100000", morseHelper), Is.EqualTo("HEY JUDE"));
	}

	[Test]
	public void Empty() {
        Assert.Multiple(() =>
        {
	        var morseHelper = new SignDecoder(_morseHelperDictionary);
            Assert.That(Decoder.DecodeBitsToText(string.Empty, morseHelper), Is.EqualTo(string.Empty));
            Assert.That(Decoder.DecodeBitsToText("0", morseHelper), Is.EqualTo(string.Empty));
            Assert.That(Decoder.DecodeBitsToText("000", morseHelper), Is.EqualTo(string.Empty));
            Assert.That(Decoder.DecodeBitsToText("0000000000", morseHelper), Is.EqualTo(string.Empty));
            Assert.That(Decoder.DecodeBitsToText("000000000000000000000000000000000000000000", morseHelper), Is.EqualTo(string.Empty));
        });
    }

	[Test]
	public void LongMessage() {
        Assert.Multiple(() =>
        {
	        var morseHelper = new SignDecoder(_morseHelperDictionary);
            Assert.That(Decoder.DecodeBitsToTextmorseHelper), Is.EqualTo("THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"));
            Assert.That(Decoder.DecodeBitsToTextmorseHelper), Is.EqualTo("SOS! THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG."));
            Assert.That(Decoder.DecodeBitsToText("00011100010101010001000000011101110101110001010111000101000111010111010001110101110000000111010101000101110100011101110111000101110111000111010000000101011101000111011101110001110101011100000001011101110111000101011100011101110001011101110100010101000000011101110111000101010111000100010111010000000111000101010100010000000101110101000101110001110111010100011101011101110000000111010100011101110111000111011101000101110101110101110", morseHelper), Is.EqualTo("THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG."));
        });
    }
    
    [Test]
    public void ShortMessages() {
        Assert.Multiple(() =>
        {
	        var morseHelper = new SignDecoder(_morseHelperDictionary);
            Assert.That(Decoder.DecodeBitsToText("10111", morseHelper), Is.EqualTo("A"));
            Assert.That(Decoder.DecodeBitsToText("101", morseHelper), Is.EqualTo("I"));
            Assert.That(Decoder.DecodeBitsToText("110011", morseHelper), Is.EqualTo("I"));
            Assert.That(Decoder.DecodeBitsToText("111000111", morseHelper), Is.EqualTo("I"));
            Assert.That(Decoder.DecodeBitsToText("111110000011111", morseHelper), Is.EqualTo("I"));
            Assert.That(Decoder.DecodeBitsToText("1", morseHelper), Is.EqualTo("E"));
            Assert.That(Decoder.DecodeBitsToText("111", morseHelper), Is.EqualTo("E"));
            Assert.That(Decoder.DecodeBitsToText("1111111", morseHelper), Is.EqualTo("E"));
            Assert.That(Decoder.DecodeBitsToText("1001", morseHelper), Is.EqualTo("EE"));
            Assert.That(Decoder.DecodeBitsToText("10001", morseHelper), Is.EqualTo("EE"));
            Assert.That(Decoder.DecodeBitsToText("100001", morseHelper), Is.EqualTo("EE"));
            Assert.That(Decoder.DecodeBitsToText("10000001", morseHelper), Is.EqualTo("E E"));
            Assert.That(Decoder.DecodeBitsToText("100000001", morseHelper), Is.EqualTo("E E"));
            Assert.That(Decoder.DecodeBitsToText("1000000001", morseHelper), Is.EqualTo("E E"));
            Assert.That(Decoder.DecodeBitsToText("10000000001", morseHelper), Is.EqualTo("E E"));
            Assert.That(Decoder.DecodeBitsToText("111000000000111", morseHelper), Is.EqualTo("EE"));
            Assert.That(Decoder.DecodeBitsToText("1110111", morseHelper), Is.EqualTo("M"));
            Assert.That(Decoder.DecodeBitsToText("11111100111111", morseHelper), Is.EqualTo("M"));
        });
    }
    
    [Test]
    public void ExtraZeros () {
        Assert.Multiple(() =>
        {
	        var morseHelper = new SignDecoder(_morseHelperDictionary);
            Assert.That(Decoder.DecodeBitsToText("01110", morseHelper), Is.EqualTo("E"));
            Assert.That(Decoder.DecodeBitsToText("1110000", morseHelper), Is.EqualTo("E"));
            Assert.That(Decoder.DecodeBitsToText("00111", morseHelper), Is.EqualTo("E"));
            Assert.That(Decoder.DecodeBitsToText("000000011100000", morseHelper), Is.EqualTo("E"));
        });
    }
    
    [Test]
    public void HardOne() {
	    var morseHelper = new SignDecoder(_morseHelperDictionary);
        Assert.That(Decoder.DecodeBitsToTextmorseHelper), Is.EqualTo("MGY CQD CQD SOS TITANIC POSITION 41.44 N 50.24 W. REQUIRE IMMEDIATE ASSISTANCE. COME AT ONCE. WE STRUCK AN ICEBERG. SINKING"));
    }
}